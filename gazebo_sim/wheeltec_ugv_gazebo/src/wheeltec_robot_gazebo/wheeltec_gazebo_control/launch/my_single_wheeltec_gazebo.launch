<launch>
    <!--选择车型-->
    <arg name="ugv_mode" value="mini_mec"/>
    <arg name="ugv_id" value="1"/>
    <arg name="init_x" value="0.0"/>
    <arg name="init_y" value="0.0"/>
    <arg name="init_z" value="0.0"/>
    <arg name="roll" value="0.0"/>
    <arg name="pitch" value="0.0"/>
    <arg name="yaw" value="0.0"/>

    <arg name="ns" value="robot_$(arg ugv_id)"/>
    <!-- world信息 -->
    <arg name="world_name" value="$(find wheeltec_description)/worlds/my_world.world"/>
    <arg name="paused" default="false"/>
    <!--以暂停状态打开Gazebo 默认为false-->
    <arg name="use_sim_time" default="true"/>
    <!--节点启动模拟时间，启动主题topic /clock 默认为true-->
    <arg name="gui" default="true"/>
    <!--启动Gazebo用户界面接口 默认为true-->
    <arg name="headless" default="false"/>
    <!--Gazebo已弃用，不起任何作用，定义仍保留以防止打破其他launch启动-->
    <arg name="debug" default="false"/>
    <!--用gdb模式启动gzserver（Gazebo 服务器） 默认为false-->

    <!-- 打开gazebo仿真-->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>
    <!--打开rviz-->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find wheeltec_gazebo_function)/rviz_config/multi_$(arg ugv_mode)_control.rviz"/>


    <group ns="robot_$(arg ugv_id)">
        <!--load controller yaml-->
        <rosparam file="$(find wheeltec_gazebo_control)/config/uni_control_$(arg ugv_mode).yaml" command="load"/>
        <!-- load the controllers -->
        <node name="controller_manager" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="$(arg ugv_mode)_left_front_wheel_velocity_controller  $(arg ugv_mode)_right_front_wheel_velocity_controller  $(arg ugv_mode)_left_rear_wheel_velocity_controller  $(arg ugv_mode)_right_rear_wheel_velocity_controller  $(arg ugv_mode)_joint_state_controller"/>
        <node pkg="wheeltec_gazebo_function" type="my_Sub_cmd_vel_$(arg ugv_mode).py" name="sub_$(arg ugv_mode)_$(arg ugv_id)_cmd" output="screen"/>
        <!-- 发布odom话题和tf -->
        <node pkg="wheeltec_gazebo_function" type="my_gazebo_odometry.py" name="gazebo_odometry_node_$(arg ugv_mode)" output="screen"/>
        <!--订阅话题推出机器人运动状态-->
        <!-- <node pkg="wheeltec_gazebo_function" type="my_real_cmd_vel_$(arg ugv_mode).py" name="pub_$(arg ugv_mode)_$(arg ugv_id)_cmd" output="screen"/> -->

        <!-- 调用xacro文件解析器 将对应车型的xacro文件转为urdf文件 -->
        <!-- <arg name="model" default="$(find xacro)/xacro '$(find wheeltec_description)/urdf/$(arg ugv_mode)/my_$(arg ugv_mode).xacro'"/>
        <param name="robot_description" command="$(arg model)" /> -->
        <param name="robot_description" command="$(find xacro)/xacro '$(find wheeltec_description)/urdf/$(arg ugv_mode)/my_$(arg ugv_mode).xacro' namespace:='$(arg ns)'"/>
        <!-- 运行robot_state_publisher节点，发布tf  -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
            <param name="publish_frequency" type="double" value="50.0" />
            <param name="tf_prefix" value="robot_$(arg ugv_id)" />
        </node>
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
            <param name="publish_frequency" type="double" value="50.0" />
            <param name="tf_prefix" value="robot_$(arg ugv_id)" />
        </node>
        <!-- 在gazebo中加载机器人模型 向gazebo_ros发出服务请求 添加urdf到gazebo中-->
        <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model robot_$(arg ugv_id) -param robot_description -x $(arg init_x) -y $(arg init_y) -z $(arg init_z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>
    </group>
</launch>
